<#@ template debug="false" hostspecific="false" language="VB" #>
<#@ assembly name="Salesforce.VisualStudio.Services.dll" #>
<#@ import namespace="Salesforce.VisualStudio.Services.ConnectedService" #>
<#@ import namespace="Salesforce.VisualStudio.Services.ConnectedService.CodeModel" #>
<#@ output extension=".vb" #>
<#@ parameter type="Salesforce.VisualStudio.Services.ConnectedService.CodeModel.GeneratedService" name="generatedService" #>
Imports Salesforce.Common
Imports Salesforce.Force
Imports System.Configuration
Imports System.Globalization
<#
    If generatedService.AuthenticationStrategy = AuthenticationStrategy.WebServerFlow Then
#>
Imports System.Web
<#
    End If
#>

Namespace <#= generatedService.ServiceNamespace.Substring(generatedService.DefaultNamespace.Length + 1) #>
    Public Class SalesforceService
        Public Sub New()
            Me.AuthenticationClient = New AuthenticationClient
        End Sub

        Private _authenticationClient As AuthenticationClient
        Public Property AuthenticationClient As AuthenticationClient
            Get
                Return Me._authenticationClient
            End Get
            Private Set(ByVal value As AuthenticationClient)
                Me._authenticationClient = value
            End Set
        End Property

<#
    If generatedService.AuthenticationStrategy = AuthenticationStrategy.WebServerFlow Then
#>
        Public Function GetWebServerForceClient() As ForceClient
            If Not SalesforceService.IsAuthenticated Then
                Throw New InvalidOperationException("The user must be logged in to get a ForceClient.")
            End If

            ' Retrieve the access token and instance URL from the session object, which were set in the SalesforceOAuthRedirectHandler.
            Me.AuthenticationClient.AccessToken = CType(HttpContext.Current.Session("AccessToken"), String)
            Me.AuthenticationClient.InstanceUrl = CType(HttpContext.Current.Session("InstanceUrl"), String)
<#
    Else
#>
        Public Async Function GetUserNamePasswordForceClientAsync() As Task(Of ForceClient)
            Await Me.AuthenticationClient.UsernamePasswordAsync(
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.ConsumerKey #>"),
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.ConsumerSecret #>"),
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.UserName #>"),
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.Password #>") + SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.SecurityToken #>", True),
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.Domain #>") + "/services/oauth2/token")
<#
    End If
#>

            Return New ForceClient(
                Me.AuthenticationClient.InstanceUrl,
                Me.AuthenticationClient.AccessToken,
                Me.AuthenticationClient.ApiVersion)
        End Function

        ''' <summary>
        ''' Checks if the user is currently authenticated with a Salesforce AccessToken.
        ''' </summary>
        Public Shared Function IsAuthenticated() As Boolean
<#
    If generatedService.AuthenticationStrategy = AuthenticationStrategy.WebServerFlow Then
#>
            Return HttpContext.Current.Session("AccessToken") IsNot Nothing
<#
    Else
#>
            Throw New InvalidOperationException("IsAuthenticated not implemented for Authentication flows beyond Web Server Flow at this time")
<#
    End If
#>
        End Function

        Friend Shared Function GetAppSetting(ByVal name As String, Optional ByVal isOptional As Boolean = False) As String
            Dim setting As String = ConfigurationManager.AppSettings(name)
            If Not isOptional AndAlso (String.IsNullOrWhiteSpace(setting) OrElse String.Equals(setting, "RequiredValue", StringComparison.OrdinalIgnoreCase)) Then
                Throw New InvalidOperationException(
                    String.Format(CultureInfo.InvariantCulture, "The value for the '{0}' key is missing from the appSettings section of the config file.", name))
            ElseIf isOptional AndAlso (String.IsNullOrWhiteSpace(setting) OrElse String.Equals(setting, "OptionalValue", StringComparison.OrdinalIgnoreCase)) Then
                setting = Nothing
            End If

            Return setting
        End Function
    End Class
End Namespace
