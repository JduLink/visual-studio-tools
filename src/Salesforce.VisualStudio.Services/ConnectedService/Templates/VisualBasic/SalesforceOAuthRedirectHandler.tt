<#@ template debug="false" hostspecific="false" language="VB" #>
<#@ assembly name="Salesforce.VisualStudio.Services.dll" #>
<#@ import namespace="Salesforce.VisualStudio.Services.ConnectedService.CodeModel" #>
<#@ output extension=".vb" #>
<#@ parameter type="Salesforce.VisualStudio.Services.ConnectedService.CodeModel.GeneratedService" name="generatedService" #>
Imports Salesforce.Common
Imports Salesforce.Common.Models
Imports System.Threading.Tasks
Imports System.Web
Imports System.Web.SessionState

Namespace <#= generatedService.ServiceNamespace.Substring(generatedService.DefaultNamespace.Length + 1) #>
    Public Class SalesforceOAuthRedirectHandler
        Inherits HttpTaskAsyncHandler
        Implements IRequiresSessionState

        Public Overrides ReadOnly Property IsReusable As Boolean
            Get
                Return True
            End Get
        End Property

        Public Overrides Async Function ProcessRequestAsync(ByVal context As HttpContext) As Task
            Dim authenticationClient As AuthenticationClient = New AuthenticationClient

            Dim state As String = HttpUtility.UrlDecode(context.Request.QueryString("state"))

            ' Get the access and refresh tokens from the Salesforce authorization server, and store them
            ' on the session object.
            Await authenticationClient.WebServerAsync(
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.ConsumerKey #>"),
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.ConsumerSecret #>"),
                SalesforceOAuthRedirectHandler.GetAbsoluteRedirectUri(),
                context.Request.QueryString("code"),
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.Domain #>") + "/services/oauth2/token")

            context.Session("AccessToken") = authenticationClient.AccessToken
            context.Session("RefreshToken") = authenticationClient.RefreshToken
            context.Session("InstanceUrl") = authenticationClient.InstanceUrl

            Dim redirectUrl As String = If(state Is Nothing, "~/", state)
            context.Response.Redirect(redirectUrl, False)
        End Function

        ''' <summary>
        ''' Returns a Salesforce authorization URL.  The optional target parameter allows the app to redirect to 
        ''' a specified page after authorization; if the parameter is not specified, the app redirects to the current 
        ''' request's URL.
        ''' </summary>
        Public Shared Function GetAuthorizationUrl(Optional targetUri As String = Nothing) As String
            Return Common.FormatAuthUrl(
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.Domain #>") + "/services/oauth2/authorize",
                ResponseTypes.Code,
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.ConsumerKey #>"),
                HttpUtility.UrlEncode(SalesforceOAuthRedirectHandler.GetAbsoluteRedirectUri()),
                DisplayTypes.Page,
                False,
                HttpUtility.UrlEncode(If(String.IsNullOrEmpty(targetUri), HttpContext.Current.Request.Url.AbsoluteUri, targetUri)))
        End Function

        Private Shared Function GetAbsoluteRedirectUri() As String
            Dim redirectUri As Uri = Nothing
            Uri.TryCreate(SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.RedirectUri #>"), UriKind.RelativeOrAbsolute, redirectUri)
            If redirectUri.IsAbsoluteUri Then
                Return redirectUri.ToString
            Else
                Dim uriAuthority As String = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority)
                Return New Uri(New Uri(uriAuthority), redirectUri).ToString
            End If
        End Function
    End Class
End Namespace
