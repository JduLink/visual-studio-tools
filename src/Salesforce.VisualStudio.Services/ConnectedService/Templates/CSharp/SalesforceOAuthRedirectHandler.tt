<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="Salesforce.VisualStudio.Services.dll" #>
<#@ import namespace="Salesforce.VisualStudio.Services.ConnectedService.CodeModel" #>
<#@ output extension=".cs" #>
<#@ parameter type="Salesforce.VisualStudio.Services.ConnectedService.CodeModel.GeneratedService" name="generatedService" #>
using Salesforce.Common;
using Salesforce.Common.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using System.Web.SessionState;

namespace <#= generatedService.ServiceNamespace #>
{
    public class SalesforceOAuthRedirectHandler : HttpTaskAsyncHandler, IRequiresSessionState
    {
        public override bool IsReusable
        {
            get { return true; }
        }

        public override async Task ProcessRequestAsync(HttpContext context)
        {
            AuthenticationClient authenticationClient = new AuthenticationClient();

            string state = HttpUtility.UrlDecode(context.Request.QueryString["state"]);

            // Get the access and refresh tokens from the Salesforce authorization server, and store them
            // on the session object.
            await authenticationClient.WebServerAsync(
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.ConsumerKey #>"),
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.ConsumerSecret #>"),
                SalesforceOAuthRedirectHandler.GetAbsoluteRedirectUri(),
                context.Request.QueryString["code"],
                SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.Domain #>") + "/services/oauth2/token");

            context.Session["AccessToken"] = authenticationClient.AccessToken;
            context.Session["RefreshToken"] = authenticationClient.RefreshToken;
            context.Session["InstanceUrl"] = authenticationClient.InstanceUrl;

            string redirectUrl = state == null ? "~/" : state;
            context.Response.Redirect(redirectUrl, false);
        }

        /// <summary>
        /// Returns a Salesforce authorization URL.  The optional target parameter allows the app to redirect to 
        /// a specified page after authorization; if the parameter is not specified, the app redirects to the current 
        /// request's URL.
        /// </summary>
        public static string GetAuthorizationUrl(string targetUri = null)
        {
            return Common.FormatAuthUrl(
                 SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.Domain #>") + "/services/oauth2/authorize",
                 ResponseTypes.Code,
                 SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.ConsumerKey #>"),
                 HttpUtility.UrlEncode(SalesforceOAuthRedirectHandler.GetAbsoluteRedirectUri()),
                 DisplayTypes.Page,
                 false,
                 HttpUtility.UrlEncode(string.IsNullOrEmpty(targetUri) ? HttpContext.Current.Request.Url.AbsoluteUri : targetUri));
        }

        private static string GetAbsoluteRedirectUri()
        {
            Uri redirectUri;
            Uri.TryCreate(SalesforceService.GetAppSetting("<#= generatedService.ConfigurationKeyNames.RedirectUri #>"), UriKind.RelativeOrAbsolute, out redirectUri);
            if (redirectUri.IsAbsoluteUri)
            {
                return redirectUri.ToString();
            }
            else
            {
                string uriAuthority = HttpContext.Current.Request.Url.GetLeftPart(UriPartial.Authority);
                return new Uri(new Uri(uriAuthority), redirectUri).ToString();
            }
        }
    }
}
